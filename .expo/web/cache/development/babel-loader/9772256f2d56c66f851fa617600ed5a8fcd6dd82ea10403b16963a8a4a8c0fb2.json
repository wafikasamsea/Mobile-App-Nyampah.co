{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useNavigationBuilder;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _routers = require(\"@react-navigation/routers\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactIs = require(\"react-is\");\nvar _Group = _interopRequireDefault(require(\"./Group\"));\nvar _isArrayEqual = _interopRequireDefault(require(\"./isArrayEqual\"));\nvar _NavigationHelpersContext = _interopRequireDefault(require(\"./NavigationHelpersContext\"));\nvar _NavigationRouteContext = _interopRequireDefault(require(\"./NavigationRouteContext\"));\nvar _NavigationStateContext = _interopRequireDefault(require(\"./NavigationStateContext\"));\nvar _Screen = _interopRequireDefault(require(\"./Screen\"));\nvar _types = require(\"./types\");\nvar _useChildListeners2 = _interopRequireDefault(require(\"./useChildListeners\"));\nvar _useComponent = _interopRequireDefault(require(\"./useComponent\"));\nvar _useCurrentRender = _interopRequireDefault(require(\"./useCurrentRender\"));\nvar _useDescriptors = _interopRequireDefault(require(\"./useDescriptors\"));\nvar _useEventEmitter = _interopRequireDefault(require(\"./useEventEmitter\"));\nvar _useFocusedListenersChildrenAdapter = _interopRequireDefault(require(\"./useFocusedListenersChildrenAdapter\"));\nvar _useFocusEvents = _interopRequireDefault(require(\"./useFocusEvents\"));\nvar _useKeyedChildListeners = _interopRequireDefault(require(\"./useKeyedChildListeners\"));\nvar _useNavigationHelpers = _interopRequireDefault(require(\"./useNavigationHelpers\"));\nvar _useOnAction = _interopRequireDefault(require(\"./useOnAction\"));\nvar _useOnGetState = _interopRequireDefault(require(\"./useOnGetState\"));\nvar _useOnRouteFocus = _interopRequireDefault(require(\"./useOnRouteFocus\"));\nvar _useRegisterNavigator = _interopRequireDefault(require(\"./useRegisterNavigator\"));\nvar _useScheduleUpdate = _interopRequireDefault(require(\"./useScheduleUpdate\"));\nvar _excluded = [\"children\", \"screenListeners\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n_types.PrivateValueStore;\nvar getRouteConfigsFromChildren = function getRouteConfigsFromChildren(children, options) {\n  var configs = React.Children.toArray(children).reduce(function (acc, child) {\n    var _child$type, _child$props;\n    if (React.isValidElement(child)) {\n      if (child.type === _Screen.default) {\n        acc.push([options, child.props]);\n        return acc;\n      }\n      if (child.type === React.Fragment || child.type === _Group.default) {\n        acc.push.apply(acc, (0, _toConsumableArray2.default)(getRouteConfigsFromChildren(child.props.children, child.type !== _Group.default ? options : options != null ? [].concat((0, _toConsumableArray2.default)(options), [child.props.screenOptions]) : [child.props.screenOptions])));\n        return acc;\n      }\n    }\n    throw new Error(\"A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found \" + (React.isValidElement(child) ? \"'\" + (typeof child.type === 'string' ? child.type : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name) + \"'\" + ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.name ? \" for the screen '\" + child.props.name + \"'\" : '') : typeof child === 'object' ? JSON.stringify(child) : \"'\" + String(child) + \"'\") + \"). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.\");\n  }, []);\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(function (config) {\n      var _config$ = config[1],\n        name = _config$.name,\n        children = _config$.children,\n        component = _config$.component,\n        getComponent = _config$.getComponent;\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\"Got an invalid name (\" + JSON.stringify(name) + \") for the screen. It must be a non-empty string.\");\n      }\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(\"Got both 'component' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\"Got both 'getComponent' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\"Got both 'component' and 'getComponent' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\"Got an invalid value for 'children' prop for the screen '\" + name + \"'. It must be a function returning a React Element.\");\n        }\n        if (component !== undefined && !(0, _reactIs.isValidElementType)(component)) {\n          throw new Error(\"Got an invalid value for 'component' prop for the screen '\" + name + \"'. It must be a valid React Component.\");\n        }\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\"Got an invalid value for 'getComponent' prop for the screen '\" + name + \"'. It must be a function returning a React Component.\");\n        }\n        if (typeof component === 'function' && component.name === 'component') {\n          console.warn(\"Looks like you're passing an inline function for 'component' prop for the screen '\" + name + \"' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.\");\n        }\n      } else {\n        throw new Error(\"Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '\" + name + \"'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.\");\n      }\n    });\n  }\n  return configs;\n};\nfunction useNavigationBuilder(createRouter, options) {\n  var navigatorKey = (0, _useRegisterNavigator.default)();\n  var route = React.useContext(_NavigationRouteContext.default);\n  var children = options.children,\n    screenListeners = options.screenListeners,\n    rest = (0, _objectWithoutProperties2.default)(options, _excluded);\n  var _React$useRef = React.useRef(createRouter((0, _extends3.default)({}, rest, route !== null && route !== void 0 && route.params && route.params.state == null && route.params.initial !== false && typeof route.params.screen === 'string' ? {\n      initialRouteName: route.params.screen\n    } : null))),\n    router = _React$useRef.current;\n  var routeConfigs = getRouteConfigsFromChildren(children);\n  var screens = routeConfigs.reduce(function (acc, config) {\n    if (config[1].name in acc) {\n      throw new Error(\"A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '\" + config[1].name + \"')\");\n    }\n    acc[config[1].name] = config;\n    return acc;\n  }, {});\n  var routeNames = routeConfigs.map(function (config) {\n    return config[1].name;\n  });\n  var routeParamList = routeNames.reduce(function (acc, curr) {\n    var initialParams = screens[curr][1].initialParams;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  var routeGetIdList = routeNames.reduce(function (acc, curr) {\n    return (0, _extends3.default)(acc, (0, _defineProperty2.default)({}, curr, screens[curr][1].getId));\n  }, {});\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n  var isStateValid = React.useCallback(function (state) {\n    return state.type === undefined || state.type === router.type;\n  }, [router.type]);\n  var isStateInitialized = React.useCallback(function (state) {\n    return state !== undefined && state.stale === false && isStateValid(state);\n  }, [isStateValid]);\n  var _React$useContext = React.useContext(_NavigationStateContext.default),\n    currentState = _React$useContext.state,\n    getCurrentState = _React$useContext.getState,\n    setCurrentState = _React$useContext.setState,\n    setKey = _React$useContext.setKey,\n    getKey = _React$useContext.getKey,\n    getIsInitial = _React$useContext.getIsInitial;\n  var stateCleanedUp = React.useRef(false);\n  var cleanUpState = React.useCallback(function () {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n  var setState = React.useCallback(function (state) {\n    if (stateCleanedUp.current) {\n      return;\n    }\n    setCurrentState(state);\n  }, [setCurrentState]);\n  var _React$useMemo = React.useMemo(function () {\n      var _route$params4;\n      var initialRouteParamList = routeNames.reduce(function (acc, curr) {\n        var _route$params, _route$params2, _route$params3;\n        var initialParams = screens[curr][1].initialParams;\n        var initialParamsFromParams = (route === null || route === void 0 ? void 0 : (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 ? void 0 : (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 ? void 0 : (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n        acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? (0, _extends3.default)({}, initialParams, initialParamsFromParams) : undefined;\n        return acc;\n      }, {});\n      if ((currentState === undefined || !isStateValid(currentState)) && (route === null || route === void 0 ? void 0 : (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null) {\n        return [router.getInitialState({\n          routeNames: routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList: routeGetIdList\n        }), true];\n      } else {\n        var _route$params$state, _route$params5;\n        return [router.getRehydratedState((_route$params$state = route === null || route === void 0 ? void 0 : (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.state) !== null && _route$params$state !== void 0 ? _route$params$state : currentState, {\n          routeNames: routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList: routeGetIdList\n        }), false];\n      }\n    }, [currentState, router, isStateValid]),\n    _React$useMemo2 = (0, _slicedToArray2.default)(_React$useMemo, 2),\n    initializedState = _React$useMemo2[0],\n    isFirstStateInitialization = _React$useMemo2[1];\n  var state = isStateInitialized(currentState) ? currentState : initializedState;\n  var nextState = state;\n  if (!(0, _isArrayEqual.default)(state.routeNames, routeNames)) {\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    });\n  }\n  var previousNestedParamsRef = React.useRef(route === null || route === void 0 ? void 0 : route.params);\n  React.useEffect(function () {\n    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;\n  }, [route === null || route === void 0 ? void 0 : route.params]);\n  if (route !== null && route !== void 0 && route.params) {\n    var previousParams = previousNestedParamsRef.current;\n    var action;\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      action = _routers.CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      action = _routers.CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    }\n    var updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : nextState;\n  }\n  var shouldUpdate = state !== nextState;\n  (0, _useScheduleUpdate.default)(function () {\n    if (shouldUpdate) {\n      setState(nextState);\n    }\n  });\n  state = nextState;\n  React.useEffect(function () {\n    setKey(navigatorKey);\n    if (!getIsInitial()) {\n      setState(nextState);\n    }\n    return function () {\n      setTimeout(function () {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n  }, []);\n  var initializedStateRef = React.useRef();\n  initializedStateRef.current = initializedState;\n  var getState = React.useCallback(function () {\n    var currentState = getCurrentState();\n    return isStateInitialized(currentState) ? currentState : initializedStateRef.current;\n  }, [getCurrentState, isStateInitialized]);\n  var emitter = (0, _useEventEmitter.default)(function (e) {\n    var _ref;\n    var routeNames = [];\n    var route;\n    if (e.target) {\n      var _route;\n      route = state.routes.find(function (route) {\n        return route.key === e.target;\n      });\n      if ((_route = route) !== null && _route !== void 0 && _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push.apply(routeNames, (0, _toConsumableArray2.default)(Object.keys(screens).filter(function (name) {\n        var _route2;\n        return ((_route2 = route) === null || _route2 === void 0 ? void 0 : _route2.name) === name;\n      })));\n    }\n    if (route == null) {\n      return;\n    }\n    var navigation = descriptors[route.key].navigation;\n    var listeners = (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)([screenListeners].concat((0, _toConsumableArray2.default)(routeNames.map(function (name) {\n      var listeners = screens[name][1].listeners;\n      return listeners;\n    }))).map(function (listeners) {\n      var map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation: navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(function (type) {\n        return type === e.type;\n      }).map(function (type) {\n        return map === null || map === void 0 ? void 0 : map[type];\n      }) : undefined;\n    }))).filter(function (cb, i, self) {\n      return cb && self.lastIndexOf(cb) === i;\n    });\n    listeners.forEach(function (listener) {\n      return listener === null || listener === void 0 ? void 0 : listener(e);\n    });\n  });\n  (0, _useFocusEvents.default)({\n    state: state,\n    emitter: emitter\n  });\n  React.useEffect(function () {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n  }, [emitter, state]);\n  var _useChildListeners = (0, _useChildListeners2.default)(),\n    childListeners = _useChildListeners.listeners,\n    addListener = _useChildListeners.addListener;\n  var _useKeyedChildListene = (0, _useKeyedChildListeners.default)(),\n    keyedListeners = _useKeyedChildListene.keyedListeners,\n    addKeyedListener = _useKeyedChildListene.addKeyedListener;\n  var onAction = (0, _useOnAction.default)({\n    router: router,\n    getState: getState,\n    setState: setState,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    },\n    emitter: emitter\n  });\n  var onRouteFocus = (0, _useOnRouteFocus.default)({\n    router: router,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    getState: getState,\n    setState: setState\n  });\n  var navigation = (0, _useNavigationHelpers.default)({\n    onAction: onAction,\n    getState: getState,\n    emitter: emitter,\n    router: router\n  });\n  (0, _useFocusedListenersChildrenAdapter.default)({\n    navigation: navigation,\n    focusedListeners: childListeners.focus\n  });\n  (0, _useOnGetState.default)({\n    getState: getState,\n    getStateListeners: keyedListeners.getState\n  });\n  var descriptors = (0, _useDescriptors.default)({\n    state: state,\n    screens: screens,\n    navigation: navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction: onAction,\n    getState: getState,\n    setState: setState,\n    onRouteFocus: onRouteFocus,\n    addListener: addListener,\n    addKeyedListener: addKeyedListener,\n    router: router,\n    emitter: emitter\n  });\n  (0, _useCurrentRender.default)({\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  });\n  var NavigationContent = (0, _useComponent.default)(_NavigationHelpersContext.default.Provider, {\n    value: navigation\n  });\n  return {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors,\n    NavigationContent: NavigationContent\n  };\n}","map":{"version":3,"names":["_routers","require","React","_interopRequireWildcard","_reactIs","_Group","_interopRequireDefault","_isArrayEqual","_NavigationHelpersContext","_NavigationRouteContext","_NavigationStateContext","_Screen","_types","_useChildListeners2","_useComponent","_useCurrentRender","_useDescriptors","_useEventEmitter","_useFocusedListenersChildrenAdapter","_useFocusEvents","_useKeyedChildListeners","_useNavigationHelpers","_useOnAction","_useOnGetState","_useOnRouteFocus","_useRegisterNavigator","_useScheduleUpdate","PrivateValueStore","getRouteConfigsFromChildren","children","options","configs","Children","toArray","reduce","acc","child","_child$type","_child$props","isValidElement","type","Screen","push","props","Fragment","Group","apply","_toConsumableArray2","default","concat","screenOptions","Error","name","JSON","stringify","String","process","env","NODE_ENV","forEach","config","_config$","component","getComponent","undefined","isValidElementType","console","warn","useNavigationBuilder","createRouter","navigatorKey","useRegisterNavigator","route","useContext","NavigationRouteContext","screenListeners","rest","_objectWithoutProperties2","_excluded","_React$useRef","useRef","_extends3","params","state","initial","screen","initialRouteName","router","current","routeConfigs","screens","routeNames","map","routeParamList","curr","initialParams","routeGetIdList","_defineProperty2","getId","length","isStateValid","useCallback","isStateInitialized","stale","_React$useContext","NavigationStateContext","currentState","getCurrentState","getState","setCurrentState","setState","setKey","getKey","getIsInitial","stateCleanedUp","cleanUpState","_React$useMemo","useMemo","_route$params4","initialRouteParamList","_route$params","_route$params2","_route$params3","initialParamsFromParams","getInitialState","_route$params$state","_route$params5","getRehydratedState","_React$useMemo2","_slicedToArray2","initializedState","isFirstStateInitialization","nextState","isArrayEqual","getStateForRouteNamesChange","previousNestedParamsRef","useEffect","previousParams","action","CommonActions","reset","navigate","path","updatedState","getStateForAction","shouldUpdate","useScheduleUpdate","setTimeout","initializedStateRef","emitter","useEventEmitter","e","_ref","target","_route","routes","find","key","index","Object","keys","filter","_route2","navigation","descriptors","listeners","cb","i","self","lastIndexOf","listener","useFocusEvents","emit","data","_useChildListeners","useChildListeners","childListeners","addListener","_useKeyedChildListene","useKeyedChildListeners","keyedListeners","addKeyedListener","onAction","useOnAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","useOnRouteFocus","useNavigationHelpers","useFocusedListenersChildrenAdapter","focusedListeners","focus","useOnGetState","getStateListeners","useDescriptors","defaultScreenOptions","useCurrentRender","NavigationContent","useComponent","NavigationHelpersContext","Provider","value"],"sources":["C:\\Users\\annel\\OneDrive\\Documents\\Project\\sam\\ppam\\node_modules\\@react-navigation\\core\\lib\\module\\useNavigationBuilder.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  options?: ScreenConfigWithParent<State, ScreenOptions, EventMap>[0]\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n        acc.push([\n          options,\n          child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        ]);\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.type !== Group\n              ? options\n              : options != null\n              ? [...options, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config[1];\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function' && component.name === 'component') {\n          // Inline anonymous functions passed in the `component` prop will have the name of the prop\n          // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n          // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n          console.warn(\n            `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n          );\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs =\n    getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config[1].name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config[1].name}')`\n      );\n    }\n\n    acc[config[1].name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config[1].name);\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr][1];\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr][1].getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr][1];\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames)) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name][1];\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}