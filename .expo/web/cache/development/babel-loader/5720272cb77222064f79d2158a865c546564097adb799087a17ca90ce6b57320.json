{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getPathFromState;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar queryString = _interopRequireWildcard(require(\"query-string\"));\nvar _fromEntries = _interopRequireDefault(require(\"./fromEntries\"));\nvar _validatePathConfig = _interopRequireDefault(require(\"./validatePathConfig\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar getActiveRoute = function getActiveRoute(state) {\n  var route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n  return route;\n};\nfunction getPathFromState(state, options) {\n  if (state == null) {\n    throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n  }\n  if (options) {\n    (0, _validatePathConfig.default)(options);\n  }\n  var configs = options !== null && options !== void 0 && options.screens ? createNormalizedConfigs(options === null || options === void 0 ? void 0 : options.screens) : {};\n  var path = '/';\n  var current = state;\n  var allParams = {};\n  var _loop = function _loop() {\n    var index = typeof current.index === 'number' ? current.index : 0;\n    var route = current.routes[index];\n    var pattern;\n    var focusedParams;\n    var focusedRoute = getActiveRoute(state);\n    var currentOptions = configs;\n    var nestedRouteNames = [];\n    var hasNext = true;\n    var _loop2 = function _loop2() {\n      pattern = currentOptions[route.name].pattern;\n      nestedRouteNames.push(route.name);\n      if (route.params) {\n        var stringify = (_currentOptions$route = currentOptions[route.name]) === null || _currentOptions$route === void 0 ? void 0 : _currentOptions$route.stringify;\n        var currentParams = (0, _fromEntries.default)(Object.entries(route.params).map(function (_ref) {\n          var _ref2 = (0, _slicedToArray2.default)(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n          return [key, stringify !== null && stringify !== void 0 && stringify[key] ? stringify[key](value) : String(value)];\n        }));\n        if (pattern) {\n          (0, _extends2.default)(allParams, currentParams);\n        }\n        if (focusedRoute === route) {\n          focusedParams = (0, _extends2.default)({}, currentParams);\n          (_pattern = pattern) === null || _pattern === void 0 ? void 0 : _pattern.split('/').filter(function (p) {\n            return p.startsWith(':');\n          }).forEach(function (p) {\n            var name = getParamName(p);\n            if (focusedParams) {\n              delete focusedParams[name];\n            }\n          });\n        }\n      }\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n        var nextRoute = route.state.routes[index];\n        var nestedConfig = currentOptions[route.name].screens;\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute;\n          currentOptions = nestedConfig;\n        } else {\n          hasNext = false;\n        }\n      }\n    };\n    while (route.name in currentOptions && hasNext) {\n      _loop2();\n    }\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern.split('/').map(function (p) {\n        var name = getParamName(p);\n        if (p === '*') {\n          return route.name;\n        }\n        if (p.startsWith(':')) {\n          var value = allParams[name];\n          if (value === undefined && p.endsWith('?')) {\n            return '';\n          }\n          return encodeURIComponent(value);\n        }\n        return encodeURIComponent(p);\n      }).join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (var param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          delete focusedParams[param];\n        }\n      }\n      var query = queryString.stringify(focusedParams, {\n        sort: false\n      });\n      if (query) {\n        path += \"?\" + query;\n      }\n    }\n    current = route.state;\n  };\n  while (current) {\n    var _currentOptions$route, _pattern;\n    _loop();\n  }\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n  return path;\n}\nvar getParamName = function getParamName(pattern) {\n  return pattern.replace(/^:/, '').replace(/\\?$/, '');\n};\nvar joinPaths = function joinPaths() {\n  var _ref3;\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return (_ref3 = []).concat.apply(_ref3, (0, _toConsumableArray2.default)(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\nvar createConfigItem = function createConfigItem(config, parentPattern) {\n  var _pattern2;\n  if (typeof config === 'string') {\n    var _pattern3 = parentPattern ? joinPaths(parentPattern, config) : config;\n    return {\n      pattern: _pattern3\n    };\n  }\n  var pattern;\n  if (config.exact && config.path === undefined) {\n    throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n  }\n  pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n  var screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n  return {\n    pattern: (_pattern2 = pattern) === null || _pattern2 === void 0 ? void 0 : _pattern2.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens: screens\n  };\n};\nvar createNormalizedConfigs = function createNormalizedConfigs(options, pattern) {\n  return (0, _fromEntries.default)(Object.entries(options).map(function (_ref4) {\n    var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),\n      name = _ref5[0],\n      c = _ref5[1];\n    var result = createConfigItem(c, pattern);\n    return [name, result];\n  }));\n};","map":{"version":3,"names":["queryString","_interopRequireWildcard","require","_fromEntries","_interopRequireDefault","_validatePathConfig","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","getActiveRoute","state","route","index","routes","length","getPathFromState","options","Error","validatePathConfig","configs","screens","createNormalizedConfigs","path","current","allParams","_loop","pattern","focusedParams","focusedRoute","currentOptions","nestedRouteNames","hasNext","_loop2","name","push","params","stringify","_currentOptions$route","currentParams","fromEntries","entries","map","_ref","_ref2","_slicedToArray2","value","String","_extends2","_pattern","split","filter","p","startsWith","forEach","getParamName","undefined","nextRoute","nestedConfig","join","endsWith","encodeURIComponent","param","query","sort","replace","joinPaths","_ref3","_len","arguments","paths","Array","_key","concat","apply","_toConsumableArray2","Boolean","createConfigItem","config","parentPattern","_pattern2","exact","_ref4","_ref5","c","result"],"sources":["C:\\Users\\annel\\OneDrive\\Documents\\Project\\sam\\ppam\\node_modules\\@react-navigation\\core\\lib\\module\\getPathFromState.tsx"],"sourcesContent":["import type {\n  NavigationState,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as queryString from 'query-string';\n\nimport fromEntries from './fromEntries';\nimport type { PathConfig, PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype State = NavigationState | Omit<PartialState<NavigationState>, 'stale'>;\n\ntype StringifyConfig = Record<string, (value: any) => string>;\n\ntype ConfigItem = {\n  pattern?: string;\n  stringify?: StringifyConfig;\n  screens?: Record<string, ConfigItem>;\n};\n\nconst getActiveRoute = (state: State): { name: string; params?: object } => {\n  const route =\n    typeof state.index === 'number'\n      ? state.routes[state.index]\n      : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * @example\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport default function getPathFromState<ParamList extends {}>(\n  state: State,\n  options?: Options<ParamList>\n): string {\n  if (state == null) {\n    throw Error(\n      \"Got 'undefined' for the navigation state. You must pass a valid state object.\"\n    );\n  }\n\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  // Create a normalized configs object which will be easier to use\n  const configs: Record<string, ConfigItem> = options?.screens\n    ? createNormalizedConfigs(options?.screens)\n    : {};\n\n  let path = '/';\n  let current: State | undefined = state;\n\n  const allParams: Record<string, any> = {};\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index] as Route<string> & {\n      state?: State;\n    };\n\n    let pattern: string | undefined;\n\n    let focusedParams: Record<string, any> | undefined;\n    let focusedRoute = getActiveRoute(state);\n    let currentOptions = configs;\n\n    // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n    let nestedRouteNames = [];\n\n    let hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        const stringify = currentOptions[route.name]?.stringify;\n\n        const currentParams = fromEntries(\n          Object.entries(route.params).map(([key, value]) => [\n            key,\n            stringify?.[key] ? stringify[key](value) : String(value),\n          ])\n        );\n\n        if (pattern) {\n          Object.assign(allParams, currentParams);\n        }\n\n        if (focusedRoute === route) {\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = { ...currentParams };\n\n          pattern\n            ?.split('/')\n            .filter((p) => p.startsWith(':'))\n            // eslint-disable-next-line no-loop-func\n            .forEach((p) => {\n              const name = getParamName(p);\n\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n        }\n      }\n\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index =\n          typeof route.state.index === 'number'\n            ? route.state.index\n            : route.state.routes.length - 1;\n\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens;\n\n        // if there is config for next route name, we go deeper\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute as Route<string> & { state?: State };\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern\n        .split('/')\n        .map((p) => {\n          const name = getParamName(p);\n\n          // We don't know what to show for wildcard patterns\n          // Showing the route name seems ok, though whatever we show here will be incorrect\n          // Since the page doesn't actually exist\n          if (p === '*') {\n            return route.name;\n          }\n\n          // If the path has a pattern for a param, put the param in the path\n          if (p.startsWith(':')) {\n            const value = allParams[name];\n\n            if (value === undefined && p.endsWith('?')) {\n              // Optional params without value assigned in route.params should be ignored\n              return '';\n            }\n\n            return encodeURIComponent(value);\n          }\n\n          return encodeURIComponent(p);\n        })\n        .join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (let param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n\n      const query = queryString.stringify(focusedParams, { sort: false });\n\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n\n    current = route.state;\n  }\n\n  // Remove multiple as well as trailing slashes\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n\n  return path;\n}\n\nconst getParamName = (pattern: string) =>\n  pattern.replace(/^:/, '').replace(/\\?$/, '');\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst createConfigItem = (\n  config: PathConfig<object> | string,\n  parentPattern?: string\n): ConfigItem => {\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return { pattern };\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  let pattern: string | undefined;\n\n  if (config.exact && config.path === undefined) {\n    throw new Error(\n      \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n    );\n  }\n\n  pattern =\n    config.exact !== true\n      ? joinPaths(parentPattern || '', config.path || '')\n      : config.path || '';\n\n  const screens = config.screens\n    ? createNormalizedConfigs(config.screens, pattern)\n    : undefined;\n\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: pattern?.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens,\n  };\n};\n\nconst createNormalizedConfigs = (\n  options: PathConfigMap<object>,\n  pattern?: string\n): Record<string, ConfigItem> =>\n  fromEntries(\n    Object.entries(options).map(([name, c]) => {\n      const result = createConfigItem(c, pattern);\n\n      return [name, result];\n    })\n  );\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}